#include<iostream>
#include<algorithm>
#include<string>


using namespace std;

string s[14];
int dp[14][1025];
int T;
int n,m;
void input()
{
    
    cin>>n>>m;
    for(int i =1; i<=n; i++)
    {
        cin>>s[i];


    }
    for(int i =0; i<14; i++)
    {
        for(int j =0; j<1025; j++) dp[i][j]=0;
    }


}
bool SeatChk(string &seats, int bit)
{
    for(int i =0; i<seats.size(); i++)
    {
        if(seats[i]=='x'&&(bit&(1<<i))) return false;
    }
    return true;
}
bool NxChk(int bit, int w)
{
    for(int i =0; i<w-1; i++)
    {
        int val =(3<<i);
        if((bit&val)==val) return false;
    }
    return true;
}
bool FrontChk(int bit, int fbit, int w)
{
    for(int i =0; i<w; i++)
    {
        if((1<<i)&fbit)
        {
            if(i>0&&((1<<(i-1))&bit)) return false;
            if((1<<(i+1)&bit)) return false;
        }
    }
    return true;
    
}
void solve()
{
    int ans =0;
    input();
    vector<pair<int,int>> bitV;
    for(int bit = 0; bit<(1<<m); bit++)
    {
        if(NxChk(bit,m))
        {
            int cnt =0; 
            for(int i =0; i<m; i++)
            {
                if((1<<i)&bit) cnt++;
            }
            bitV.push_back({bit, cnt});
        }
    }
    for(int i =1; i<=n; i++)
    {
        for(pair<int, int> bit: bitV)
        {
            if(!SeatChk(s[i], bit.first)) continue;
            for(pair<int,int> front_bit: bitV)
            {
                if(FrontChk(bit.first, front_bit.first, m))
                {
                    dp[i][bit.first]= max(dp[i][bit.first], dp[i-1][front_bit.first]+bit.second);
                    ans = max(ans, dp[i][bit.first]);
                }
            }
        }
    }
    cout<<ans<<'\n';
    return;
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    cin>>T;
    while(T--)
    {
        
        solve();
    }

}
